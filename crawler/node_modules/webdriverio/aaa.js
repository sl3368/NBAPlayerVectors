'use strict';

function test() {
    var aa;
    return regeneratorRuntime.async(function test$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                // try {
                console.log(1);
                context$1$0.next = 3;
                return regeneratorRuntime.awrap(new Promise(function (a, b) {
                    // throw new Error('jii')
                    setTimeout(a.bind(null, 'HAHAHAHAH'), 2000);
                }));

            case 3:
                aa = context$1$0.sent;

                console.log(2, aa);
                context$1$0.next = 7;
                return regeneratorRuntime.awrap(new Promise(function (a, b) {
                    setTimeout(a, 2000);
                }));

            case 7:
                return context$1$0.abrupt('return', context$1$0.sent);

            case 8:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
}

// }catch(e) {console.log(e);}
console.log('#hoi');
test().then(console.log.bind(console, 111));
console.log('noo');

