'use strict';

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _deepmerge = require('deepmerge');

var _deepmerge2 = _interopRequireDefault(_deepmerge);

var _utilsConfigParser = require('./utils/ConfigParser');

var _utilsConfigParser2 = _interopRequireDefault(_utilsConfigParser);

var _ = require('../');

var haltSIGINT = false;
var sigintWasCalled = false;
var hasSessionID = false;

process.on('message', function (m) {
    var capabilities = undefined;

    switch (m.command) {
        case 'run':

            var configParser = new _utilsConfigParser2['default']();
            configParser.addConfigFile(m.configFile);
            configParser.merge(m.argv);

            var config = configParser.getConfig();
            capabilities = configParser.getCapabilities(m.cid);

            if (typeof config.framework !== 'string') {
                throw new Error('You haven\'t defined a valid framework\nPlease checkout http://webdriver.io/guide/testrunner/frameworks.html');
            }

            var frameworkLibrary = config.framework.toLowerCase();
            var framework = undefined;

            try {
                framework = require('wdio-' + frameworkLibrary + '-framework');
            } catch (e) {
                throw new Error('Couldn\'t load "' + frameworkLibrary + '" framework. You need to install it with `$ npm install wdio-' + frameworkLibrary + '-framework`!');
            }

            process.send({
                event: 'runner:start',
                cid: m.cid,
                capabilities: capabilities,
                config: config
            });

            if (m.isMultiremote) {
                var options = capabilities;

                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = _getIterator(_Object$keys(options)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var browserName = _step.value;

                        options[browserName] = (0, _deepmerge2['default'])(config, options[browserName]);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator['return']) {
                            _iterator['return']();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                global.browser = (0, _.multiremote)(options);

                /**
                 * put browser name into global scope
                 */
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = _getIterator(_Object$keys(options)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var browserName = _step2.value;

                        global[browserName] = global.browser.select(browserName);
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                            _iterator2['return']();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }
            } else {
                config.desiredCapabilities = capabilities;
                global.browser = (0, _.remote)(config);
            }

            /**
             * initialise WebdriverIO compliant plugins
             */
            if (typeof config.plugins === 'object') {
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = _getIterator(_Object$keys(config.plugins)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var pluginName = _step3.value;

                        var plugin = undefined;

                        try {
                            plugin = require(pluginName);
                        } catch (e) {
                            throw new Error('Couldn\'t find plugin "' + pluginName + '". You need to install it with `$ npm install ' + pluginName + '`!');
                        }

                        if (typeof plugin.init !== 'function') {
                            throw new Error('The plugin "' + pluginName + '" is not WebdriverIO compliant!');
                        }

                        plugin.init(global.browser, config.plugins[pluginName]);
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3['return']) {
                            _iterator3['return']();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }
            }

            /**
             * register runner events
             */
            global.browser.on('init', function (payload) {
                process.send({
                    event: 'runner:init',
                    cid: m.cid,
                    sessionID: payload.sessionID,
                    options: payload.options,
                    desiredCapabilities: payload.desiredCapabilities
                });

                hasSessionID = true;
            });

            global.browser.on('command', function (payload) {
                process.send({
                    event: 'runner:command',
                    cid: m.cid,
                    method: payload.method,
                    uri: payload.uri,
                    data: payload.data
                });
            });

            global.browser.on('result', function (payload) {
                process.send({
                    event: 'runner:result',
                    cid: m.cid,
                    requestData: payload.requestData,
                    requestOptions: payload.requestOptions,
                    body: payload.body // ToDo figure out if this slows down the execution time
                });
            });

            global.browser.on('error', function (payload) {
                process.send({
                    event: 'runner:error',
                    cid: m.cid,
                    err: payload.err,
                    requestData: payload.requestData,
                    requestOptions: payload.requestOptions,
                    body: payload.body
                });
            });

            /**
             * make sure we prevent process from getting killed
             */
            haltSIGINT = true;

            var throwError = function throwError(e) {
                process.send({
                    event: 'error',
                    cid: m.cid,
                    capabilities: capabilities,
                    error: {
                        message: e.message,
                        stack: e.stack
                    }
                });
                return 1;
            };

            var failures = undefined;
            var end = global.browser.end;
            global.browser.init().then(function () {
                haltSIGINT = false;

                /**
                 * kill session of SIGINT signal showed up while trying to
                 * get a session ID
                 */
                if (sigintWasCalled) {
                    return end.call(global.browser)['finally'](function () {
                        return process.exit(1);
                    });
                }

                try {
                    return framework.run(m.cid, config, m.specs, capabilities);
                } catch (e) {
                    throwError(e);
                }
            }, throwError).then(function (f) {
                failures = f;
                return end.call(global.browser);
            }, throwError).then(function (res) {
                if (!config.updateJob || config.host.indexOf('saucelabs') === -1 || !res || !res.sessionId) {
                    return;
                }

                // ToDo update sauce job
                return null;
            }, throwError)['finally'](function () {
                process.send({
                    event: 'runner:end',
                    failures: failures,
                    cid: m.cid
                });

                process.exit(failures === 0 ? 0 : 1);
            });

            break;
        default:
            throw new Error('Can\'t recognise "' + m.command + '" command');
    }
});

/**
 * catches ctrl+c event
 */
process.on('SIGINT', function () {
    if (sigintWasCalled) {
        return;
    }

    sigintWasCalled = true;

    if (haltSIGINT) {
        return;
    }

    if (!hasSessionID) {
        return process.kill(1);
    }

    global.browser.removeAllListeners();
    global.browser.end()['finally'](function () {
        return process.exit(1);
    });
});
