'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _tty = require('tty');

var _tty2 = _interopRequireDefault(_tty);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _supportsColor = require('supports-color');

var _supportsColor2 = _interopRequireDefault(_supportsColor);

var ISATTY = _tty2['default'].isatty(1) && _tty2['default'].isatty(2);

var COLORS = {
    'pass': 90,
    'fail': 31,
    'bright pass': 92,
    'bright fail': 91,
    'bright yellow': 93,
    'pending': 36,
    'suite': 0,
    'error title': 0,
    'error message': 31,
    'error stack': 90,
    'checkmark': 32,
    'fast': 90,
    'medium': 33,
    'slow': 31,
    'green': 32,
    'light': 90,
    'diff gutter': 90,
    'diff added': 32,
    'diff removed': 31
};

var SYMBOLS_WIN = {
    ok: '√',
    err: '×',
    dot: '.',
    error: 'F'
};

var SYMBOLS = {
    ok: '✓',
    err: '✖',
    dot: '․',
    error: 'F'
};

var BaseReporter = (function (_events$EventEmitter) {
    _inherits(BaseReporter, _events$EventEmitter);

    function BaseReporter() {
        var _this = this;

        _classCallCheck(this, BaseReporter);

        _get(Object.getPrototypeOf(BaseReporter.prototype), 'constructor', this).call(this);

        this.stats = {
            suites: 0,
            tests: 0,
            passes: 0,
            pending: 0,
            failures: 0,
            runner: {}
        };
        this.failures = [];
        this.printEpilogue = true;
        this.cursor = new Cursor();

        this.on('start', function () {
            _this.stats.start = new Date();
        });

        this.on('runner:start', function (runner) {
            _this.stats.runner[runner.cid] = {
                start: new Date(),
                capabilities: runner.capabilities,
                config: runner.config,
                tests: []
            };
        });

        this.on('runner:init', function (runner) {
            _this.stats.runner[runner.cid].sessionID = runner.sessionID;
        });

        this.on('suite:start', function (suite) {
            suite.root || _this.stats.suites++;
        });

        this.on('test:end', function () {
            _this.stats.tests++;
        });

        this.on('test:pass', function (test) {
            _this.stats.runner[test.cid].tests.push(null);
            _this.stats.passes++;
        });

        this.on('test:fail', function (test) {
            _this.stats.failures++;
            _this.stats.runner[test.cid].tests.push(test.err);

            /**
             * check if error also happened in other runners
             */
            var duplicateError = false;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = _getIterator(_this.failures), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var failure = _step.value;

                    if (test.err.message !== failure.err.message || failure.title !== test.title) {
                        continue;
                    }
                    duplicateError = true;
                    failure.runner[test.cid] = test.runner[test.cid];
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator['return']) {
                        _iterator['return']();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            if (!duplicateError) {
                _this.failures.push(test);
            }
        });

        this.on('test:pending', function () {
            _this.stats.pending++;
        });

        this.on('runner:end', function (runner) {
            _this.stats.runner[runner.cid].end = new Date();
        });

        this.on('end', function (args) {
            _this.stats.end = new Date();
            _this.stats.duration = new Date() - _this.stats.start;
            _this.printEpilogue = _this.printEpilogue && !args.sigint;
        });

        this.on('error', function (m) {
            _this.printEpilogue = false;

            var fmt = _this.color('error message', 'ERROR: %s');
            console.log(fmt, m.error.message);

            var sanitizedCaps = [];
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = _getIterator(_Object$keys(m.capabilities)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var capability = _step2.value;

                    /**
                     * we don't need all capability types to recognise a vm
                     */
                    if (['browserName', 'platform', 'version', 'platformVersion', 'deviceName', 'app'].indexOf(capability) === -1) {
                        continue;
                    }

                    sanitizedCaps.push(capability + ': ' + JSON.stringify(m.capabilities[capability]));
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                        _iterator2['return']();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            fmt = _this.color('bright yellow', sanitizedCaps.join(', '));
            console.log(fmt);

            if (m.error.stack) {
                fmt = _this.color('error stack', m.error.stack.replace('Error: ' + m.error.message + '\n', ''));
            } else {
                fmt = _this.color('error stack', '    no stack available');
            }
            console.log(fmt);
        });
    }

    /**
     * Expose some basic cursor interactions
     * that are common among reporters.
     */

    /**
     * Color `str` with the given `type`,
     * allowing colors to be disabled,
     * as well as user-defined color
     * schemes.
     *
     * @param {String} type
     * @param {String} str
     * @return {String}
     * @api private
     */

    _createClass(BaseReporter, [{
        key: 'color',
        value: function color(type, str) {
            if (!_supportsColor2['default']) return String(str);
            return '\u001b[' + this.colors[type] + 'm' + str + '\u001b[0m';
        }

        /**
         * Output common epilogue used by many of
         * the bundled reporters.
         *
         * @api public
         */
    }, {
        key: 'epilogue',
        value: function epilogue() {
            this.stats = null;
            var fmt = null;

            if (!this.printEpilogue) {
                return;
            }

            console.log('\n');

            // passes
            fmt = this.color('green', '%d passing') + this.color('light', ' (%ss)');
            console.log(fmt, this.stats.passes || 0, (Math.round(this.stats.duration / 100) / 10).toFixed(2));

            // pending
            if (this.stats.pending) {
                fmt = this.color('pending', '%d pending');
                console.log(fmt, this.stats.pending);
            }

            // failures
            if (this.stats.failures) {
                fmt = this.color('fail', '%d failing');
                console.log(fmt, this.stats.failures);
                this.listFailures();
            }

            console.log();
        }

        /**
         * Outut the given failures as a list
         */
    }, {
        key: 'listFailures',
        value: function listFailures() {
            var _this2 = this;

            console.log();

            this.failures.forEach(function (test, i) {
                var runningBrowser = '';
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = _getIterator(_Object$keys(test.runner)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var pid = _step3.value;

                        var caps = test.runner[pid];
                        runningBrowser += '\nrunning';

                        if (caps.browserName) {
                            runningBrowser += ' ' + caps.browserName;
                        }
                        if (caps.version) {
                            runningBrowser += ' (v' + caps.version + ')';
                        }
                        if (caps.platform) {
                            runningBrowser += ' on ' + caps.platform;
                        }

                        var host = _this2.stats.runner[pid].config.host;
                        if (host && host.indexOf('saucelabs') > -1) {
                            runningBrowser += '\nCheck out job at https://saucelabs.com/tests/' + _this2.stats.runner[pid].sessionID;
                        }
                    }

                    // format
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3['return']) {
                            _iterator3['return']();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }

                var fmt = _this2.color('error title', '%s) %s:\n') + _this2.color('error message', '%s') + _this2.color('bright yellow', '%s') + _this2.color('error stack', '\n%s\n');

                console.log(fmt, i + 1, test.title, test.err.message, runningBrowser, test.err.stack);
            });
        }

        /**
         * Default color map.
         */
    }, {
        key: 'colors',
        get: function get() {
            return COLORS;
        }

        /**
         * Default symbol map.
         */
    }, {
        key: 'symbols',
        get: function get() {
            /**
             * With node.js on Windows: use symbols available in terminal default fonts
             */
            if (process.platform === 'win32') {
                return SYMBOLS_WIN;
            }

            return SYMBOLS;
        }
    }]);

    return BaseReporter;
})(_events2['default'].EventEmitter);

var Cursor = (function () {
    function Cursor() {
        _classCallCheck(this, Cursor);
    }

    _createClass(Cursor, [{
        key: 'hide',
        value: function hide() {
            ISATTY && process.stdout.write('\u001b[?25l');
        }
    }, {
        key: 'show',
        value: function show() {
            ISATTY && process.stdout.write('\u001b[?25h');
        }
    }, {
        key: 'deleteLine',
        value: function deleteLine() {
            ISATTY && process.stdout.write('\u001b[2K');
        }
    }, {
        key: 'beginningOfLine',
        value: function beginningOfLine() {
            ISATTY && process.stdout.write('\u001b[0G');
        }
    }, {
        key: 'CR',
        value: function CR() {
            if (ISATTY) {
                this.deleteLine();
                this.beginningOfLine();
            } else {
                process.stdout.write('\r');
            }
        }
    }, {
        key: 'isatty',
        get: function get() {
            return ISATTY;
        }
    }]);

    return Cursor;
})();

exports['default'] = BaseReporter;
exports.Cursor = Cursor;
